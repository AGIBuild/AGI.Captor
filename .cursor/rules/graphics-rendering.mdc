---
description: Graphics rendering and image processing patterns
globs: **/Services/ExportService.cs,**/Rendering/*.cs,**/*Renderer*.cs
---

# Graphics Rendering and Image Processing

## Core Technologies
- **SkiaSharp**: Primary 2D graphics library
- **System.Drawing**: Windows BMP fallback (SkiaSharp limitation)
- **Avalonia Drawing**: UI layer graphics

## Image Export Pipeline
1. **Screen Capture**: Native platform screenshot
2. **Annotation Rendering**: Overlay annotations on captured image
3. **Format Encoding**: Convert to target format (PNG, JPEG, BMP, etc.)
4. **File Output**: Save to file or clipboard

## Format Support
- **PNG**: SkiaSharp native, lossless compression
- **JPEG**: SkiaSharp native, quality settings 0-100
- **BMP**: System.Drawing on Windows (SkiaSharp limitation)
- **TIFF/GIF**: SkiaSharp native

## Critical BMP Handling
```csharp
// From ExportService.cs - BMP requires special handling
if (format == ExportFormat.Bmp)
{
    // Use System.Drawing on Windows for BMP
    await SaveBitmapWithSystemDrawingAsync(bitmap, filePath);
}
else
{
    // Use SkiaSharp for other formats
    await SaveSkiaBitmapAsync(bitmap, filePath, settings, progressCallback);
}
```

## Coordinate System Transformations
- **Screen Coordinates**: Physical pixel positions
- **Canvas Coordinates**: Relative to overlay window
- **Annotation Coordinates**: Relative to selection rectangle
- Handle DPI scaling between coordinate systems

## Performance Optimization
- **Dirty Regions**: Only redraw changed areas
- **Layer Caching**: Cache expensive rendering operations
- **Memory Management**: Dispose of graphics resources promptly
- **Async Processing**: Use background threads for heavy operations

## Rendering Pipeline
```csharp
// Typical rendering sequence:
1. Create SKCanvas with target bitmap
2. Draw screenshot as background
3. Apply coordinate transformations
4. Render annotations in order
5. Finalize and encode result
```

## Memory Management
```csharp
// Always dispose graphics objects
using var bitmap = new SKBitmap(width, height);
using var canvas = new SKCanvas(bitmap);
using var paint = new SKPaint();
// Rendering operations...
// Automatic disposal via using statements
```

## Quality Settings
- **JPEG Quality**: 0-100, recommend 90+ for screenshots
- **PNG Compression**: 0-9, recommend 6-9 for balance
- **Color Depth**: 32-bit RGBA for maximum quality
- **Anti-aliasing**: Enabled for smooth lines and text