---
globs: *.axaml,*.axaml.cs
description: Avalonia XAML and code-behind standards
---

# Avalonia XAML Standards for AGI.Kapster

## XAML Naming and Structure
- Use PascalCase for control names: `<Button Name="SaveButton" />`
- Prefer Grid and StackPanel for layouts
- Use meaningful semantic names, not layout-based names
- Group related controls with panels

## Data Binding Patterns
- Use strongly-typed binding when possible
- Prefer `{Binding Property}` over code-behind manipulation
- Use converters for data transformation
- Implement INotifyPropertyChanged in ViewModels

## Code-Behind Best Practices
- Minimal logic in code-behind
- Use for UI-specific operations only (focus, scroll, etc.)
- Event handlers should delegate to ViewModel commands
- Avoid direct property manipulation

## Resource Management
- Define styles in App.axaml or dedicated resource files
- Use StaticResource for static values
- Use DynamicResource for theme-aware resources
- Group related styles together

## Control Templates and Styles
- Use consistent margin/padding patterns
- Follow Material Design or similar design system
- Ensure high DPI compatibility
- Test on different screen scales

## Instance Management
- Be aware of XAML vs code-created control instances
- Use FindControl<>() carefully - prefer direct references
- Store control references in fields when needed frequently
- Example from [OverlayWindow.axaml.cs](mdc:src/AGI.Kapster.App/Overlays/OverlayWindow.axaml.cs):
  ```csharp
  private NewAnnotationOverlay? _annotator; // Direct reference
  // Instead of: this.FindControl<NewAnnotationOverlay>("Annotator")
  ```

## Event Handling
- Prefer commands over event handlers
- Use weak events for memory leak prevention
- Unsubscribe from events in disposal methods
- Handle null references gracefully

## Layout Performance
- Avoid nested virtualization
- Use appropriate panel types for scenarios
- Consider Canvas for absolute positioning (annotations)
- Use Grid for structured layouts