name: Code Quality

# Comprehensive code quality checks
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run quality checks daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  code-analysis:
    name: üîç Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
        
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: ‚öôÔ∏è Configure Git safe.directory
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global --add safe.directory $(pwd)
        
    - name: üì¶ Restore dependencies
      shell: pwsh
      run: ./build.ps1 Restore
      
    - name: üî® Build with analysis
      shell: pwsh
      run: |
        ./build.ps1 Build --configuration Release
        
    - name: üß™ Run tests with coverage
      shell: pwsh
      run: |
        ./build.ps1 Test --configuration Release --coverage
        
    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: artifacts/coverage/
        fail_ci_if_error: false
        verbose: true
        
    - name: üìà Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-analysis-results
        path: |
          artifacts/test-results/
          artifacts/coverage/
        retention-days: 30

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: ‚öôÔ∏è Configure Git safe.directory
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global --add safe.directory $(pwd)
        
    - name: üîç Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        
    - name: üî® Build for analysis
      shell: pwsh
      run: |
        ./build.ps1 Clean
        ./build.ps1 Restore
        ./build.ps1 Build --configuration Release
        
    - name: üîç Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: üîê Run security audit
      shell: pwsh
      run: |
        # Check for known vulnerabilities in NuGet packages
        dotnet list package --vulnerable --include-transitive 2>&1 | Tee-Object -FilePath "security-audit.log"
        
        # Check for outdated packages
        dotnet list package --outdated 2>&1 | Tee-Object -FilePath "outdated-packages.log"
        
    - name: üì§ Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-audit.log
          outdated-packages.log
        retention-days: 30

  performance-test:
    name: ‚ö° Performance Test
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: ‚öôÔ∏è Configure Git safe.directory
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global --add safe.directory $(pwd)
        
    - name: üî® Build for performance testing
      shell: pwsh
      run: |
        ./build.ps1 Clean
        ./build.ps1 Restore
        ./build.ps1 Build --configuration Release
        
    - name: ‚ö° Run performance tests
      shell: pwsh
      run: |
        if (Test-Path "tests/") {
          ./build.ps1 Test --configuration Release --test-filter "Category=Performance"
        } else {
          Write-Host "‚ö†Ô∏è No performance tests found, skipping..."
        }
        
    - name: üìä Generate performance report
      shell: pwsh
      run: |
        # Basic performance metrics
        Write-Host "üìä Build Performance Metrics" | Tee-Object -FilePath "performance-report.md"
        Write-Host "=============================" | Tee-Object -Append -FilePath "performance-report.md"
        Write-Host "" | Tee-Object -Append -FilePath "performance-report.md"
        
        # Check assembly sizes
        Write-Host "## Assembly Sizes" | Tee-Object -Append -FilePath "performance-report.md"
        if (Test-Path "artifacts/publish") {
          Get-ChildItem "artifacts/publish" -Recurse -Filter "*.dll" | 
            Sort-Object Length -Descending | 
            Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB,2)}} | 
            Format-Table | Out-String | Tee-Object -Append -FilePath "performance-report.md"
        }
        
        # Build timing (if available)
        Write-Host "## Build Performance" | Tee-Object -Append -FilePath "performance-report.md"
        Write-Host "Build completed at: $(Get-Date)" | Tee-Object -Append -FilePath "performance-report.md"
        
    - name: üìä Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.md
        retention-days: 30

  quality-gate:
    name: üéØ Quality Gate
    runs-on: ubuntu-latest
    needs: [code-analysis, security-scan]
    if: always()
    
    steps:
    - name: üìä Evaluate quality metrics
      shell: pwsh
      run: |
        Write-Host "üéØ Quality Gate Evaluation"
        Write-Host "=========================="
        
        $codeAnalysisResult = "${{ needs.code-analysis.result }}"
        $securityScanResult = "${{ needs.security-scan.result }}"
        
        Write-Host "Code Analysis: $codeAnalysisResult"
        Write-Host "Security Scan: $securityScanResult"
        Write-Host "Dependency Check: SKIPPED (requires GitHub Advanced Security)"
        
        $allPassed = ($codeAnalysisResult -eq "success") -and 
                     ($securityScanResult -eq "success")
        
        if ($allPassed) {
          Write-Host "‚úÖ Quality gate PASSED - All checks successful!"
        } else {
          Write-Host "‚ùå Quality gate FAILED - Some checks failed!"
          if ($env:GITHUB_EVENT_NAME -eq "pull_request") {
            Write-Host "::error::Quality gate failed. Please address the issues before merging."
            exit 1
          }
        }