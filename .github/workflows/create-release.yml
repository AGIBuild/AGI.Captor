name: Create Release Tag

# 创建发布标签工作流 - 使用 GitVersion 自动计算版本号
on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean
      dry_run:
        description: '仅计算版本号，不创建标签'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  create-release-tag:
    name: 📋 Create Release Tag
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
        
    - name: 🔧 Setup tool environment
      run: |
        # Ensure dotnet tools directory is in PATH
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        echo "DOTNET_TOOL_PATH=$HOME/.dotnet/tools" >> $GITHUB_ENV
        
        # Create tools directory if it doesn't exist
        mkdir -p "$HOME/.dotnet/tools"
        
        # Show environment info
        echo "🔍 Environment Information:"
        echo "  .NET version: $(dotnet --version)"
        echo "  HOME: $HOME"
        echo "  PATH: $PATH"
        echo "  Tools directory: $HOME/.dotnet/tools"
        
    - name: ⚙️ Configure Git
      run: |
        git config --global --add safe.directory /github/workspace
        git config --global --add safe.directory $(pwd)
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: 📊 Calculate version with GitVersion
      id: version
      shell: pwsh
      run: |
        Write-Host "🔍 Calculating version using GitVersion..."
        
        # Function to check if GitVersion is available
        function Test-GitVersion {
          try {
            $result = & dotnet gitversion --version 2>&1
            return $LASTEXITCODE -eq 0
          } catch {
            return $false
          }
        }
        
        # Install GitVersion tool if not available
        if (-not (Test-GitVersion)) {
          Write-Host "📦 Installing GitVersion tool..."
          try {
            & dotnet tool install --global GitVersion.Tool --version 5.12.0
            if ($LASTEXITCODE -ne 0) {
              throw "Failed to install GitVersion tool with exit code $LASTEXITCODE"
            }
            
            Write-Host "✅ GitVersion tool installed"
            
            # Verify installation by checking the tool directly
            $toolPath = "$env:DOTNET_TOOL_PATH/dotnet-gitversion"
            if (Test-Path $toolPath) {
              Write-Host "✅ GitVersion executable found at: $toolPath"
            } else {
              # Try alternative path
              $toolPath = "$env:HOME/.dotnet/tools/dotnet-gitversion"
              if (Test-Path $toolPath) {
                Write-Host "✅ GitVersion executable found at: $toolPath"
              } else {
                Write-Host "⚠️ GitVersion executable not found, but proceeding with dotnet command"
              }
            }
            
          } catch {
            Write-Host "❌ Failed to install GitVersion: $($_.Exception.Message)"
            Write-Host "🔄 Checking if GitVersion is available through other means..."
            
            # List installed tools
            Write-Host "📋 Installed global tools:"
            & dotnet tool list --global
            
            exit 1
          }
        } else {
          Write-Host "✅ GitVersion already available"
        }
        
        # Get current version information with comprehensive error handling
        try {
          Write-Host "📊 Executing GitVersion..."
          
          # First try to run GitVersion with verbose output for debugging
          Write-Host "🔍 GitVersion configuration check:"
          & dotnet gitversion --showconfig
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "⚠️ GitVersion config check failed, but continuing..."
          }
          
          # Get the actual version information
          $gitVersionJson = & dotnet gitversion --output json 2>&1
          
          if ($LASTEXITCODE -ne 0) {
            throw "GitVersion execution failed with exit code $LASTEXITCODE. Output: $gitVersionJson"
          }
          
          if ([string]::IsNullOrWhiteSpace($gitVersionJson)) {
            throw "GitVersion returned empty output"
          }
          
          # Parse JSON output
          try {
            $gitVersion = $gitVersionJson | ConvertFrom-Json
          } catch {
            throw "Failed to parse GitVersion JSON output: $($_.Exception.Message). Raw output: $gitVersionJson"
          }
          
          if (-not $gitVersion.SemVer) {
            throw "Invalid GitVersion output - missing SemVer property. Available properties: $($gitVersion | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name)"
          }
          
          Write-Host "📋 Current Version Information:"
          Write-Host "  SemVer: $($gitVersion.SemVer)"
          Write-Host "  FullSemVer: $($gitVersion.FullSemVer)"
          Write-Host "  Major: $($gitVersion.Major)"
          Write-Host "  Minor: $($gitVersion.Minor)"
          Write-Host "  Patch: $($gitVersion.Patch)"
          Write-Host "  BranchName: $($gitVersion.BranchName)"
          Write-Host "  CommitsSinceVersionSource: $($gitVersion.CommitsSinceVersionSource)"
          
        } catch {
          Write-Host "❌ Error getting GitVersion information: $($_.Exception.Message)"
          Write-Host ""
          Write-Host "🔍 Comprehensive debugging information:"
          Write-Host "  Current directory: $(pwd)"
          Write-Host "  Git repository status:"
          & git status --porcelain
          Write-Host "  Git branches:"
          & git branch -a
          Write-Host "  Git tags:"
          & git tag -l | Sort-Object
          Write-Host "  GitVersion.yml exists: $(Test-Path 'GitVersion.yml')"
          if (Test-Path 'GitVersion.yml') {
            Write-Host "  GitVersion.yml content:"
            Get-Content 'GitVersion.yml' | ForEach-Object { Write-Host "    $_" }
          }
          Write-Host "  Available dotnet tools:"
          & dotnet tool list --global
          Write-Host "  PATH environment:"
          Write-Host "    $env:PATH"
          Write-Host "  Tool path check:"
          Write-Host "    DOTNET_TOOL_PATH: $env:DOTNET_TOOL_PATH"
          Write-Host "    HOME/.dotnet/tools exists: $(Test-Path "$env:HOME/.dotnet/tools")"
          Write-Host "    dotnet-gitversion exists: $(Test-Path "$env:HOME/.dotnet/tools/dotnet-gitversion")"
          
          Write-Host ""
          Write-Host "📋 Raw GitVersion diagnostic output:"
          & dotnet gitversion --verbosity Diagnostic 2>&1
          
          exit 1
        }
        
        # Use GitVersion calculated version
        $isPrerelease = "${{ github.event.inputs.prerelease }}" -eq "true"
        
        # Determine version to use
        if ($isPrerelease) {
          # For prerelease, use FullSemVer or add preview suffix
          if ($gitVersion.FullSemVer -match "-") {
            $newVersion = $gitVersion.FullSemVer
          } else {
            $newVersion = "$($gitVersion.SemVer)-preview.1"
          }
          $actualPrerelease = $true
        } else {
          # For stable release, use SemVer
          $newVersion = $gitVersion.SemVer
          $actualPrerelease = $gitVersion.FullSemVer -match "-(alpha|beta|rc|preview)"
        }
        
        $tagName = "v$newVersion"
        
        Write-Host "🎯 Version determination:"
        Write-Host "  Requested prerelease: $isPrerelease"
        Write-Host "  Actual prerelease: $actualPrerelease"
        Write-Host "  Final version: $newVersion"
        
        # Check if tag already exists
        $existingTag = git tag -l $tagName
        if ($existingTag) {
          Write-Host "❌ Tag $tagName already exists!"
          Write-Host "Existing tags:"
          git tag -l | Sort-Object | ForEach-Object { Write-Host "  $_" }
          exit 1
        }
        
        # Output version information
        echo "version=$newVersion" >> $env:GITHUB_OUTPUT
        echo "tag-name=$tagName" >> $env:GITHUB_OUTPUT
        echo "is-prerelease=$actualPrerelease" >> $env:GITHUB_OUTPUT
        echo "gitversion-semver=$($gitVersion.SemVer)" >> $env:GITHUB_OUTPUT
        echo "gitversion-fullsemver=$($gitVersion.FullSemVer)" >> $env:GITHUB_OUTPUT
        
        Write-Host ""
        Write-Host "🏷️ New Release Version: $newVersion"
        Write-Host "🔖 Tag Name: $tagName"
        Write-Host "🔄 Is Prerelease: $actualPrerelease"
        
        # Show what will be included in this release
        $lastTag = git describe --tags --abbrev=0 2>$null
        if ($lastTag) {
          Write-Host ""
          Write-Host "📝 Changes since last release ($lastTag):"
          git log --oneline "$lastTag..HEAD" | ForEach-Object { Write-Host "  $_" }
        } else {
          Write-Host ""
          Write-Host "📝 This will be the first release"
        }
        
    - name: 🏷️ Create and push tag
      if: github.event.inputs.dry_run != 'true'
      shell: pwsh
      run: |
        $tagName = "${{ steps.version.outputs.tag-name }}"
        $version = "${{ steps.version.outputs.version }}"
        $isPrerelease = "${{ steps.version.outputs.is-prerelease }}"
        
        Write-Host "🚀 Creating release tag: $tagName"
        
        # Create annotated tag with release information
        $tagMessage = "Release $version`n`nAuto-generated release tag created by GitHub Actions.`nPrerelease: $isPrerelease`nCreated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')`n`nThis tag will trigger the automated release build process."
        
        git tag -a $tagName -m $tagMessage
        
        Write-Host "📤 Pushing tag to remote repository..."
        git push origin $tagName
        
        Write-Host "✅ Tag $tagName created and pushed successfully!"
        Write-Host ""
        Write-Host "🔄 This will automatically trigger the Release Build & Publish workflow."
        Write-Host "📊 Monitor the progress at: https://github.com/${{ github.repository }}/actions"
        
    - name: 📋 Dry run summary
      if: github.event.inputs.dry_run == 'true'
      shell: pwsh
      run: |
        Write-Host "🔍 DRY RUN - No tag was created"
        Write-Host "======================================"
        Write-Host "Calculated version: ${{ steps.version.outputs.version }}"
        Write-Host "Tag name: ${{ steps.version.outputs.tag-name }}"
        Write-Host "Is prerelease: ${{ steps.version.outputs.is-prerelease }}"
        Write-Host ""
        Write-Host "To create this release, run this workflow again with 'Dry run' unchecked."
        
    - name: 📊 Output summary
      shell: pwsh
      run: |
        $dryRun = "${{ github.event.inputs.dry_run }}" -eq "true"
        
        if (-not $dryRun) {
          Write-Host "🎉 Release tag creation completed!"
          Write-Host "=================================="
          Write-Host "Version: ${{ steps.version.outputs.version }}"
          Write-Host "Tag: ${{ steps.version.outputs.tag-name }}"
          Write-Host "Prerelease: ${{ steps.version.outputs.is-prerelease }}"
          Write-Host ""
          Write-Host "🔄 Next steps:"
          Write-Host "1. The Release Build & Publish workflow will start automatically"
          Write-Host "2. Monitor progress in the Actions tab"
          Write-Host "3. Release will be published to GitHub Releases when complete"
        }