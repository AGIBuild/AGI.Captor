name: create-release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Mark release as prerelease'
        required: false
        default: 'false'

permissions:
  contents: write

concurrency:
  group: create-release
  cancel-in-progress: false

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🛠️ Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          fetch-depth: 0

      - name: Validate locked version
        id: set-version
        run: |
          if [ ! -f version.json ]; then
            echo 'version.json missing. Run nuke UpgradeVersion first.' >&2
            exit 1
          fi
          VERSION=$(jq -r '.version' version.json)
          if ! echo "$VERSION" | grep -Eq '^[0-9]{4}\.[1-9][0-9]?\.[1-9][0-9]?\.[0-2][0-9][0-5][0-9]$'; then
            echo "Invalid version format: $VERSION" >&2
            exit 1
          fi
          echo "Using version $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run CheckVersionLocked
        shell: pwsh
        run: ./build.ps1 CheckVersionLocked

      - name: Ensure tag not exists
        run: |
          TAG=v$VERSION
          if git rev-parse -q --verify refs/tags/$TAG >/dev/null; then
            echo "Tag $TAG already exists locally" >&2
            exit 1
          fi
          if git ls-remote --exit-code --tags origin "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists on remote" >&2
            exit 1
          fi

      - name: Create tag
        run: |
          TAG=v$VERSION
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"
      # GitHub Release (assets & notes) is created/updated by release.yml on tag push
      - name: Summary
        run: |
          echo "Tag created: v$VERSION" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next workflow (release.yml) will build & publish artifacts automatically." >> $GITHUB_STEP_SUMMARY
          echo "Prerelease flag chosen: ${{ github.event.inputs.prerelease }} (interpreted downstream)." >> $GITHUB_STEP_SUMMARY