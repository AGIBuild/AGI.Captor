name: verify-version

on:
  pull_request:
    branches: [ main, release ]
  push:
    branches: [ main, release ]

jobs:
  verify:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: �️ Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          fetch-depth: 0

      - name: Restore tools
        run: dotnet tool restore || true

      - name: Validate version.json exists
        shell: pwsh
        run: |
          if (-not (Test-Path version.json)) {
            Write-Host "version.json missing. Run 'nuke UpgradeVersion' and commit." -ForegroundColor Red
            exit 1
          }

      - name: Run CheckVersionLocked target
        shell: pwsh
        run: ./build.ps1 CheckVersionLocked

      - name: Detect direct csproj version edits (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # If csproj version tags changed without version.json change -> fail
          set -e
          CHANGED_CSproj=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -Ei '\.csproj$' || true)
          if [ -n "$CHANGED_CSproj" ]; then
            if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -q '^version.json$'; then
              echo "Detected .csproj change(s) without version.json update:" >&2
              echo "$CHANGED_CSproj" >&2
              exit 1
            fi
            # If both changed, ensure version.json timestamp version increments vs base
            BASE_VER=$(git show origin/${{ github.base_ref }}:version.json 2>/dev/null | jq -r '.version' || echo '')
            NEW_VER=$(jq -r '.version' version.json)
            if [ -n "$BASE_VER" ] && [ "$BASE_VER" = "$NEW_VER" ]; then
              echo "version.json not updated (same version) though .csproj modified." >&2
              exit 1
            fi
          fi

      - name: Summary
        run: echo "Version verification passed."