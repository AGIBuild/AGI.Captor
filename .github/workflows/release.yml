name: Release Build & Publish

# ÂèëÂ∏ÉÂàÜÊîØÂíåÊ†áÁ≠æÁöÑÊ≠£ÂºèÂèëÂ∏ÉÊûÑÂª∫
on:
  push:
    tags: [ 'v*' ]  # Âè™Âú®ÁâàÊú¨Ê†áÁ≠æÊé®ÈÄÅÊó∂Ëß¶Âèë
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  prepare-release:
    name: üìã Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-number: ${{ steps.version.outputs.version-number }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üìä Determine version
      id: version
      shell: pwsh
      run: |
        Write-Host "Event Name: ${{ github.event_name }}"
        Write-Host "Ref Type: ${{ github.ref_type }}"
        Write-Host "Ref Name: ${{ github.ref_name }}"
        
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.tag }}"
          $isPrerelease = "${{ github.event.inputs.prerelease }}"
          Write-Host "Using workflow_dispatch inputs: $version"
        } elseif ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}"
          $isPrerelease = if ($version -match "-(alpha|beta|rc|preview)") { "true" } else { "false" }
          Write-Host "Using tag version: $version"
        } else {
          # This should not happen with current trigger configuration
          Write-Host "ERROR: Unexpected trigger condition"
          $version = "v1.3.0"
          $isPrerelease = "false"
        }
        
        # Ensure version format
        if ($version -and -not $version.StartsWith("v")) {
          $version = "v$version"
        }
        
        # Export version without 'v' prefix for build scripts
        $versionNumber = $version -replace "^v", ""
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "version-number=$versionNumber" >> $env:GITHUB_OUTPUT
        echo "is-prerelease=$isPrerelease" >> $env:GITHUB_OUTPUT
        
        Write-Host "üè∑Ô∏è Release Version: $version"
        Write-Host "üî¢ Version Number: $versionNumber"
        Write-Host "üîÑ Is Prerelease: $isPrerelease"

  build-and-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
        
    - name: üèóÔ∏è Full build and test
      shell: pwsh
      env:
        VERSION: ${{ needs.prepare-release.outputs.version-number }}
        RELEASE_VERSION: ${{ needs.prepare-release.outputs.version }}
      run: |
        Write-Host "Building with version: $env:VERSION"
        Write-Host "Release version: $env:RELEASE_VERSION"
        
        # Choose appropriate build script based on availability
        if (Test-Path "./build.ps1") {
          Write-Host "Using build.ps1 script"
          ./build.ps1 Clean
          ./build.ps1 Restore
          ./build.ps1 Build --configuration Release --version $env:VERSION
          ./build.ps1 Test --configuration Release --coverage
        } elseif (Test-Path "./build.sh") {
          Write-Host "Using build.sh script"
          chmod +x ./build.sh
          ./build.sh Clean
          ./build.sh Restore
          ./build.sh Build --configuration Release --version $env:VERSION
          ./build.sh Test --configuration Release --coverage
        } else {
          Write-Host "Using dotnet commands directly"
          dotnet clean
          dotnet restore
          dotnet build --configuration Release --no-restore -p:Version=$env:VERSION
          dotnet test --configuration Release --no-build --verbosity normal
        }
        
    - name: üìä Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-test-results
        path: artifacts/test-results/
        retention-days: 30
        
    - name: üìà Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-coverage
        path: artifacts/coverage/
        retention-days: 30

  release-windows:
    name: ü™ü Release Windows
    runs-on: windows-latest
    needs: [prepare-release, build-and-test]
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
        
    - name: üîß Setup WiX Toolset
      shell: pwsh
      run: |
        # Install WiX v4 if not available
        try {
          $wixVersion = & wix --version 2>$null
          Write-Host "‚úÖ WiX already installed: $wixVersion"
        } catch {
          Write-Host "üì¶ Installing WiX Toolset v4..."
          dotnet tool install --global wix
        }
        
    - name: üì¶ Build and package
      shell: pwsh
      env:
        VERSION: ${{ needs.prepare-release.outputs.version-number }}
        RELEASE_VERSION: ${{ needs.prepare-release.outputs.version }}
      run: |
        Write-Host "Building Windows ${{ matrix.arch }} with version: $env:VERSION"
        Write-Host "Release version: $env:RELEASE_VERSION"
        
        # Choose appropriate build script for Windows
        if (Test-Path "./build.ps1") {
          Write-Host "Using build.ps1 script"
          ./build.ps1 Clean
          ./build.ps1 Publish --configuration Release --rids win-${{ matrix.arch }} --skip-tests --version $env:VERSION
          ./build.ps1 Package --configuration Release --rids win-${{ matrix.arch }} --version $env:VERSION
        } elseif (Test-Path "./build.sh") {
          Write-Host "Using build.sh script"
          # Use pwsh to call bash script on Windows
          bash -c "chmod +x ./build.sh && ./build.sh Clean && ./build.sh Publish --configuration Release --rids win-${{ matrix.arch }} --skip-tests --version $env:VERSION && ./build.sh Package --configuration Release --rids win-${{ matrix.arch }} --version $env:VERSION"
        } else {
          Write-Host "Using dotnet commands directly"
          dotnet clean
          dotnet publish src/AGI.Captor.Desktop/AGI.Captor.Desktop.csproj -c Release -r win-${{ matrix.arch }} --self-contained true -o artifacts/publish/win-${{ matrix.arch }} -p:Version=$env:VERSION
          # Create simple zip package as fallback
          New-Item -ItemType Directory -Path artifacts/packages -Force
          Compress-Archive -Path artifacts/publish/win-${{ matrix.arch }}/* -DestinationPath artifacts/packages/AGI.Captor-$env:VERSION-win-${{ matrix.arch }}.zip
        }
        
    - name: üì§ Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}-release
        path: artifacts/packages/
        retention-days: 90

  release-macos:
    name: üçé Release macOS
    runs-on: macos-latest
    needs: [prepare-release, build-and-test]
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
        
    - name: üì¶ Build and package
      shell: bash
      env:
        VERSION: ${{ needs.prepare-release.outputs.version-number }}
        RELEASE_VERSION: ${{ needs.prepare-release.outputs.version }}
      run: |
        echo "Building macOS ${{ matrix.arch }} with version: $VERSION"
        echo "Release version: $RELEASE_VERSION"
        
        # Choose appropriate build script for macOS
        if [ -f "./build.sh" ]; then
          echo "Using build.sh script"
          chmod +x ./build.sh
          ./build.sh Clean
          ./build.sh Publish --configuration Release --rids osx-${{ matrix.arch }} --skip-tests --version $VERSION
          ./build.sh Package --configuration Release --rids osx-${{ matrix.arch }} --version $VERSION
        elif [ -f "./build.ps1" ]; then
          echo "Using build.ps1 script via pwsh"
          pwsh -c "./build.ps1 Clean; ./build.ps1 Publish --configuration Release --rids osx-${{ matrix.arch }} --skip-tests --version $env:VERSION; ./build.ps1 Package --configuration Release --rids osx-${{ matrix.arch }} --version $env:VERSION"
        else
          echo "Using dotnet commands directly"
          dotnet clean
          dotnet publish src/AGI.Captor.Desktop/AGI.Captor.Desktop.csproj -c Release -r osx-${{ matrix.arch }} --self-contained true -o artifacts/publish/osx-${{ matrix.arch }} -p:Version=$VERSION
          # Create package directory
          mkdir -p artifacts/packages
          cd artifacts/publish/osx-${{ matrix.arch }}
          zip -r ../../packages/AGI.Captor-$VERSION-osx-${{ matrix.arch }}.zip .
        fi
        
    - name: üì§ Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}-release
        path: artifacts/packages/
        retention-days: 90

  release-linux:
    name: üêß Release Linux
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
        
    - name: üì¶ Build and package
      shell: bash
      env:
        VERSION: ${{ needs.prepare-release.outputs.version-number }}
        RELEASE_VERSION: ${{ needs.prepare-release.outputs.version }}
      run: |
        echo "Building Linux ${{ matrix.arch }} with version: $VERSION"
        echo "Release version: $RELEASE_VERSION"
        
        # Choose appropriate build script for Linux
        if [ -f "./build.sh" ]; then
          echo "Using build.sh script"
          chmod +x ./build.sh
          ./build.sh Clean
          ./build.sh Publish --configuration Release --rids linux-${{ matrix.arch }} --skip-tests --version $VERSION
          ./build.sh Package --configuration Release --rids linux-${{ matrix.arch }} --version $VERSION
        elif [ -f "./build.ps1" ]; then
          echo "Using build.ps1 script via pwsh"
          pwsh -c "./build.ps1 Clean; ./build.ps1 Publish --configuration Release --rids linux-${{ matrix.arch }} --skip-tests --version $env:VERSION; ./build.ps1 Package --configuration Release --rids linux-${{ matrix.arch }} --version $env:VERSION"
        else
          echo "Using dotnet commands directly"
          dotnet clean
          dotnet publish src/AGI.Captor.Desktop/AGI.Captor.Desktop.csproj -c Release -r linux-${{ matrix.arch }} --self-contained true -o artifacts/publish/linux-${{ matrix.arch }} -p:Version=$VERSION
          # Create package directory
          mkdir -p artifacts/packages
          cd artifacts/publish/linux-${{ matrix.arch }}
          tar -czf ../../packages/AGI.Captor-$VERSION-linux-${{ matrix.arch }}.tar.gz .
        fi
        
    - name: üì§ Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}-release
        path: artifacts/packages/
        retention-days: 90

  publish-release:
    name: üöÄ Publish Release
    runs-on: ubuntu-latest
    needs: [prepare-release, release-windows, release-macos, release-linux]
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4
      
    - name: üì¶ Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
        pattern: "*-release"
        
    - name: üìã Prepare release assets
      shell: pwsh
      run: |
        $version = "${{ needs.prepare-release.outputs.version }}"
        $releaseDir = "final-release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        
        Write-Host "üéØ Processing release artifacts for version: $version"
        
        # Process all downloaded artifacts - files should already have correct naming
        Get-ChildItem "release-artifacts" -Directory | ForEach-Object {
          $platformDir = $_.FullName
          Write-Host "üìÇ Processing: $($_.Name)"
          
          Get-ChildItem "$platformDir" -File -Recurse | ForEach-Object {
            $file = $_
            # Files should already have correct version naming from build scripts
            Copy-Item $file.FullName "$releaseDir/$($file.Name)"
            Write-Host "  ‚úÖ $($file.Name)"
          }
        }
        
        Write-Host "üìã Final release assets:"
        Get-ChildItem $releaseDir | Sort-Object Name | ForEach-Object { 
          Write-Host "  ‚Ä¢ $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
        }
        
    - name: üöÄ Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: final-release/*
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: AGI.Captor ${{ needs.prepare-release.outputs.version }}
        prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
        generate_release_notes: true
        body: |
          ## üéâ AGI.Captor ${{ needs.prepare-release.outputs.version }}
          
          ### üì¶ Installation Packages
          
          **Windows:**
          - `AGI.Captor-*-win-x64.msi` - Windows Installer (Intel/AMD 64-bit)
          - `AGI.Captor-*-win-arm64.msi` - Windows Installer (ARM64)
          
          **macOS:**
          - `AGI.Captor-*-osx-x64.pkg` - macOS Package (Intel)
          - `AGI.Captor-*-osx-arm64.pkg` - macOS Package (Apple Silicon)
          
          **Linux:**
          - `AGI.Captor-*-linux-x64.deb` - Debian Package (x64)
          - `AGI.Captor-*-linux-arm64.deb` - Debian Package (ARM64)
          
          ### üîÑ Auto-Update
          This release includes automatic update functionality. The application will:
          - Check for updates in the background (every 24 hours by default)
          - Download and install updates automatically (configurable)
          - Support cross-platform update distribution
          
          ### üõ†Ô∏è Installation Instructions
          
          **Windows:** Download and run the `.msi` file. Administrator privileges may be required.
          
          **macOS:** Download and run the `.pkg` file. You may need to allow the app in System Preferences > Security & Privacy.
          
          **Linux:** Install the `.deb` package using `sudo dpkg -i <package-name>.deb`
          
          ### üìù Release Notes
          See the automatically generated release notes below for detailed changes.
        token: ${{ secrets.GH_PAT }}

  # Cleanup intermediate artifacts
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: always()
    
    steps:
    - name: üóëÔ∏è Delete intermediate artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          windows-x64-release
          windows-arm64-release
          macos-x64-release
          macos-arm64-release
          linux-x64-release
          linux-arm64-release
        failOnError: false