name: Release Build & Publish

# 发布分支和标签的正式发布构建
on:
  push:
    branches: [ 'release' ]  # 固定使用 release 分支
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📊 Determine version
      id: version
      shell: pwsh
      run: |
        Write-Host "Event Name: ${{ github.event_name }}"
        Write-Host "Ref Type: ${{ github.ref_type }}"
        Write-Host "Ref Name: ${{ github.ref_name }}"
        
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.tag }}"
          $isPrerelease = "${{ github.event.inputs.prerelease }}"
          Write-Host "Using workflow_dispatch inputs"
        } elseif ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}"
          $isPrerelease = if ($version -match "-(alpha|beta|rc|preview)") { "true" } else { "false" }
          Write-Host "Using tag version: $version"
        } else {
          # Release branch build - use GitVersion or extract from latest tag
          Write-Host "Building from release branch"
          
          # Try to get the latest tag
          $latestTag = git describe --tags --abbrev=0 2>$null
          if ($latestTag) {
            # Increment patch version for release branch builds
            if ($latestTag -match "v(\d+)\.(\d+)\.(\d+)") {
              $major = $matches[1]
              $minor = $matches[2]
              $patch = [int]$matches[3] + 1
              $version = "v$major.$minor.$patch"
              Write-Host "Auto-incremented version from latest tag: $version"
            } else {
              $version = "v1.3.0"
              Write-Host "Using default version: $version"
            }
          } else {
            $version = "v1.3.0"
            Write-Host "No tags found, using default version: $version"
          }
          $isPrerelease = "false"
        }
        
        # Ensure version format
        if ($version -and -not $version.StartsWith("v")) {
          $version = "v$version"
        }
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "is-prerelease=$isPrerelease" >> $env:GITHUB_OUTPUT
        
        Write-Host "🏷️ Release Version: $version"
        Write-Host "🔄 Is Prerelease: $isPrerelease"

  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
        
    - name: 🏗️ Full build and test
      shell: pwsh
      run: |
        # Choose appropriate build script based on availability
        if (Test-Path "./build.ps1") {
          Write-Host "Using build.ps1 script"
          ./build.ps1 Clean
          ./build.ps1 Restore
          ./build.ps1 Build --configuration Release
          ./build.ps1 Test --configuration Release --coverage
        } elseif (Test-Path "./build.sh") {
          Write-Host "Using build.sh script"
          chmod +x ./build.sh
          ./build.sh Clean
          ./build.sh Restore
          ./build.sh Build --configuration Release
          ./build.sh Test --configuration Release --coverage
        } else {
          Write-Host "Using dotnet commands directly"
          dotnet clean
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal
        }
        
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-test-results
        path: artifacts/test-results/
        retention-days: 30
        
    - name: 📈 Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-coverage
        path: artifacts/coverage/
        retention-days: 30

  release-windows:
    name: 🪟 Release Windows
    runs-on: windows-latest
    needs: [prepare-release, build-and-test]
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 🔧 Setup WiX Toolset
      shell: pwsh
      run: |
        # Install WiX v4 if not available
        try {
          $wixVersion = & wix --version 2>$null
          Write-Host "✅ WiX already installed: $wixVersion"
        } catch {
          Write-Host "📦 Installing WiX Toolset v4..."
          dotnet tool install --global wix
        }
        
    - name: 📦 Build and package
      shell: pwsh
      run: |
        ./build.ps1 Clean
        ./build.ps1 Publish --configuration Release --rids win-${{ matrix.arch }} --skip-tests
        ./build.ps1 Package --configuration Release --rids win-${{ matrix.arch }}
        
    - name: 📤 Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: windows-${{ matrix.arch }}-release
        path: artifacts/packages/
        retention-days: 90

  release-macos:
    name: 🍎 Release macOS
    runs-on: macos-latest
    needs: [prepare-release, build-and-test]
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Build and package
      shell: bash
      run: |
        ./build.sh Clean
        ./build.sh Publish --configuration Release --rids osx-${{ matrix.arch }} --skip-tests
        ./build.sh Package --configuration Release --rids osx-${{ matrix.arch }}
        
    - name: 📤 Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: macos-${{ matrix.arch }}-release
        path: artifacts/packages/
        retention-days: 90

  release-linux:
    name: 🐧 Release Linux
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    strategy:
      matrix:
        arch: [x64, arm64]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Build and package
      shell: bash
      run: |
        ./build.sh Clean
        ./build.sh Publish --configuration Release --rids linux-${{ matrix.arch }} --skip-tests
        ./build.sh Package --configuration Release --rids linux-${{ matrix.arch }}
        
    - name: 📤 Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}-release
        path: artifacts/packages/
        retention-days: 90

  publish-release:
    name: 🚀 Publish Release
    runs-on: ubuntu-latest
    needs: [prepare-release, release-windows, release-macos, release-linux]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
        pattern: "*-release"
        
    - name: 📋 Prepare release assets
      shell: pwsh
      run: |
        $version = "${{ needs.prepare-release.outputs.version }}"
        $releaseDir = "final-release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        
        Write-Host "🎯 Processing release artifacts for version: $version"
        
        # Process all downloaded artifacts
        Get-ChildItem "release-artifacts" -Directory | ForEach-Object {
          $platformDir = $_.FullName
          Write-Host "📂 Processing: $($_.Name)"
          
          Get-ChildItem "$platformDir" -File -Recurse | ForEach-Object {
            $file = $_
            $newName = if ($file.Name -notmatch $version) {
              $file.Name -replace "(.+)(\..+)$", "`$1-$version`$2"
            } else {
              $file.Name
            }
            
            Copy-Item $file.FullName "$releaseDir/$newName"
            Write-Host "  ✅ $newName"
          }
        }
        
        Write-Host "📋 Final release assets:"
        Get-ChildItem $releaseDir | Sort-Object Name | ForEach-Object { 
          Write-Host "  • $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
        }
        
    - name: 🚀 Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: final-release/*
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: AGI.Captor ${{ needs.prepare-release.outputs.version }}
        prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
        generate_release_notes: true
        body: |
          ## 🎉 AGI.Captor ${{ needs.prepare-release.outputs.version }}
          
          ### 📦 Installation Packages
          
          **Windows:**
          - `AGI.Captor-*-win-x64.msi` - Windows Installer (Intel/AMD 64-bit)
          - `AGI.Captor-*-win-arm64.msi` - Windows Installer (ARM64)
          
          **macOS:**
          - `AGI.Captor-*-osx-x64.pkg` - macOS Package (Intel)
          - `AGI.Captor-*-osx-arm64.pkg` - macOS Package (Apple Silicon)
          
          **Linux:**
          - `AGI.Captor-*-linux-x64.deb` - Debian Package (x64)
          - `AGI.Captor-*-linux-arm64.deb` - Debian Package (ARM64)
          
          ### 🔄 Auto-Update
          This release includes automatic update functionality. The application will:
          - Check for updates in the background (every 24 hours by default)
          - Download and install updates automatically (configurable)
          - Support cross-platform update distribution
          
          ### 🛠️ Installation Instructions
          
          **Windows:** Download and run the `.msi` file. Administrator privileges may be required.
          
          **macOS:** Download and run the `.pkg` file. You may need to allow the app in System Preferences > Security & Privacy.
          
          **Linux:** Install the `.deb` package using `sudo dpkg -i <package-name>.deb`
          
          ### 📝 Release Notes
          See the automatically generated release notes below for detailed changes.
        token: ${{ secrets.GH_PAT }}

  # Cleanup intermediate artifacts
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: always()
    
    steps:
    - name: 🗑️ Delete intermediate artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          windows-x64-release
          windows-arm64-release
          macos-x64-release
          macos-arm64-release
          linux-x64-release
          linux-arm64-release
        failOnError: false