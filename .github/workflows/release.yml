name: Release Build & Publish

# 发布分支和标签的正式发布构建
on:
  push:
    tags: [ 'v*' ]  # 只在版本标签推送时触发
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write
concurrency:
  group: release-${{ github.ref || github.event.inputs.tag }}
  cancel-in-progress: false

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-number: ${{ steps.version.outputs.version-number }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📊 Determine version
      id: version
      shell: pwsh
      run: |
        Write-Host "Event Name: ${{ github.event_name }}"
        Write-Host "Ref Type: ${{ github.ref_type }}"
        Write-Host "Ref Name: ${{ github.ref_name }}"
        
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.tag }}"
          $isPrerelease = "${{ github.event.inputs.prerelease }}"
          Write-Host "Using workflow_dispatch inputs: $version"
        } elseif ("${{ github.ref_type }}" -eq "tag") {
          $version = "${{ github.ref_name }}"
          $isPrerelease = if ($version -match "-(alpha|beta|rc|preview)") { "true" } else { "false" }
          Write-Host "Using tag version: $version"
        } else {
          Write-Host "ERROR: Unexpected trigger condition" >&2
          exit 1
        }
        
        # Ensure version format
        if ($version -and -not $version.StartsWith("v")) {
          $version = "v$version"
        }
        
        # Export version without 'v' prefix for build scripts
        $versionNumber = $version -replace "^v", ""
        
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "version-number=$versionNumber" >> $env:GITHUB_OUTPUT
        echo "is-prerelease=$isPrerelease" >> $env:GITHUB_OUTPUT
        
        Write-Host "🏷️ Release Version: $version"
        Write-Host "🔢 Version Number: $versionNumber"
        Write-Host "🔄 Is Prerelease: $isPrerelease"

    - name: 🔐 Enforce tag originates from release branch
      if: ${{ github.ref_type == 'tag' }}
      shell: pwsh
      run: |
        git fetch --all --prune --unshallow 2>$null || git fetch --all --prune
        $releaseBranch = 'origin/release'
        $exists = git branch -r --list $releaseBranch
        if (-not $exists) {
          Write-Host "❌ Required branch 'release' not found on remote."; exit 1
        }
        $tagRef = "${{ github.ref_name }}"
        $tagCommit = git rev-list -n 1 $tagRef
        if (-not $tagCommit) { Write-Host "❌ Unable to resolve tag commit"; exit 1 }
        git merge-base --is-ancestor $tagCommit $releaseBranch; if ($LASTEXITCODE -ne 0) {
          Write-Host "❌ Tag $tagRef (commit $tagCommit) is NOT based on release branch. Abort."; exit 1
        }
        Write-Host "✅ Tag $tagRef commit $tagCommit is contained in release branch."

    - name: 🔒 Validate version.json consistency
      shell: pwsh
      run: |
        if (-Not (Test-Path version.json)) { Write-Host 'version.json missing'; exit 1 }
        $json = Get-Content version.json -Raw | ConvertFrom-Json
        if (-not $json.version) { Write-Host 'version.json missing version field'; exit 1 }
        $locked = $json.version
        $tagVersion = "${{ steps.version.outputs.version }}"  # includes leading v
        $tagNumber = $tagVersion -replace '^v',''
        if ($locked -ne $tagNumber) { Write-Host "❌ Mismatch: version.json=$locked tag/version=$tagNumber"; exit 1 }
        Write-Host "✅ version.json matches tag/version: $locked"
        if ($locked -notmatch '^[0-9]{4}\.[1-9][0-9]{2,3}\.[0-9]{1,2}[0-9]{4}$') { Write-Host "❌ Locked version format invalid: $locked"; exit 1 }
        Write-Host "✅ Locked version format valid."

  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest
    needs: prepare-release
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: 🔒 Validate locked version
      run: |
        if [ ! -f version.json ]; then echo 'version.json missing'; exit 1; fi
        ./build.sh CheckVersionLocked || (echo 'CheckVersionLocked failed' && exit 1)
        
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          ${{ env.DOTNET_VERSION }}
        dotnet-quality: 'preview'
    - name: ♻️ NuGet cache
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-
        
    - name: 🏗️ Full build and test
      shell: pwsh
      env:
        VERSION: ${{ needs.prepare-release.outputs.version-number }}
        RELEASE_VERSION: ${{ needs.prepare-release.outputs.version }}
      run: |
        Write-Host "Building (version already locked in source). Ignoring injected VERSION=$env:VERSION"
        if (Test-Path "./build.ps1") {
          ./build.ps1 Clean
          ./build.ps1 Restore
          ./build.ps1 Build --configuration Release
          ./build.ps1 Test --configuration Release --coverage
        } elseif (Test-Path "./build.sh") {
          chmod +x ./build.sh
          ./build.sh Clean
          ./build.sh Restore
          ./build.sh Build --configuration Release
          ./build.sh Test --configuration Release --coverage
        } else {
          dotnet clean
            dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build --verbosity normal
        }
        
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-test-results
        path: artifacts/test-results/
        retention-days: 30
        
    - name: 📈 Upload coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: release-coverage
        path: artifacts/coverage/
        retention-days: 30

  build-packages:
    name: 📦 Build & Package
    needs: [prepare-release, build-and-test]
    strategy:
      fail-fast: true
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        arch: [x64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            ${{ env.DOTNET_VERSION }}
          dotnet-quality: 'preview'
      - name: NuGet cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Setup WiX (Windows only)
        if: startsWith(matrix.os, 'windows')
        shell: pwsh
        run: |
          try { $wixVersion = & wix --version 2>$null; Write-Host "WiX: $wixVersion" } catch { dotnet tool install --global wix }
      - name: Publish & Package
        shell: bash
        env:
          VERSION: ${{ needs.prepare-release.outputs.version-number }}
          RELEASE_VERSION: ${{ needs.prepare-release.outputs.version }}
        run: |
          set -e
          case "${{ matrix.os }}" in
            windows-latest) RID_PREFIX=win ;;
            macos-latest)   RID_PREFIX=osx ;;
            ubuntu-latest)  RID_PREFIX=linux ;;
          esac
          RID="$RID_PREFIX-${{ matrix.arch }}"
          echo "Building $RELEASE_VERSION for $RID"
          if [ -f ./build.sh ]; then
            chmod +x ./build.sh
            ./build.sh Publish --configuration Release --rids $RID --skip-tests
            ./build.sh Package --configuration Release --rids $RID
          elif [ -f ./build.ps1 ]; then
            pwsh -c "./build.ps1 Publish --configuration Release --rids $RID --skip-tests; ./build.ps1 Package --configuration Release --rids $RID"
          else
            dotnet publish src/AGI.Captor.Desktop/AGI.Captor.Desktop.csproj -c Release -r $RID --self-contained true -o artifacts/publish/$RID
            mkdir -p artifacts/packages
            if [[ $RID == win-* || $RID == osx-* ]]; then
              (cd artifacts/publish/$RID && zip -r ../../packages/AGI.Captor-$VERSION-$RID.zip .)
            else
              (cd artifacts/publish/$RID && tar -czf ../../packages/AGI.Captor-$VERSION-$RID.tar.gz .)
            fi
          fi
          mkdir -p artifacts/packages/by-rid/$RID
          find artifacts/packages -maxdepth 1 -type f -name "*-$RID.*" -exec mv {} artifacts/packages/by-rid/$RID/ \;
          echo "Contents for $RID:" && ls -al artifacts/packages/by-rid/$RID
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}-release
          path: artifacts/packages/by-rid/${{ (contains(matrix.os,'windows') && 'win') || (contains(matrix.os,'macos') && 'osx') || (contains(matrix.os,'ubuntu') && 'linux') }}-${{ matrix.arch }}/
          retention-days: 90

  publish-release:
    name: 🚀 Publish Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-packages]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📦 Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/
        pattern: "*-release"
        
    - name: 📋 Prepare release assets
      shell: pwsh
      run: |
        $version = "${{ needs.prepare-release.outputs.version }}"
        $releaseDir = "final-release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        Write-Host "🎯 Processing release artifacts for version: $version"
        Get-ChildItem "release-artifacts" -Directory | ForEach-Object {
          $platformDir = $_.FullName
          Write-Host "📂 Processing: $($_.Name)"
          Get-ChildItem "$platformDir" -File -Recurse | ForEach-Object {
            $file = $_
            Copy-Item $file.FullName "$releaseDir/$($file.Name)"
            Write-Host "  ✅ $($file.Name)"
          }
        }
        $expected = @(
          @{ Rid='win-x64';    Pattern='*-win-x64.msi';    Friendly='Windows x64 MSI' }
          @{ Rid='win-arm64';  Pattern='*-win-arm64.msi';  Friendly='Windows ARM64 MSI' }
          @{ Rid='osx-x64';    Pattern='*-osx-x64.pkg';    Friendly='macOS Intel PKG' }
          @{ Rid='osx-arm64';  Pattern='*-osx-arm64.pkg';  Friendly='macOS Apple Silicon PKG' }
          @{ Rid='linux-x64';  Pattern='*-linux-x64.deb'; Friendly='Linux x64 DEB' }
          @{ Rid='linux-arm64';Pattern='*-linux-arm64.deb';Friendly='Linux ARM64 DEB' }
        )
        $missing = @()
        foreach ($e in $expected) {
          if (-not (Get-ChildItem -Path $releaseDir -File -Filter $e.Pattern -ErrorAction SilentlyContinue)) {
            $missing += "$($e.Rid) -> expecting $($e.Friendly) pattern $($e.Pattern)"
          }
        }
        if ($missing.Count -gt 0) {
          Write-Host "❌ Missing expected artifacts:" 
          $missing | ForEach-Object { Write-Host "  - $_" }
          exit 1
        } else {
          Write-Host "✅ All expected RID installer artifacts present." 
        }
        $manifest = "SHASUMS-$version.txt"
        $manifestPath = Join-Path $releaseDir $manifest
        if (Test-Path $manifestPath) { Remove-Item $manifestPath -Force }
        Get-ChildItem $releaseDir -File | Sort-Object Name | ForEach-Object {
          $hash = Get-FileHash $_.FullName -Algorithm SHA256
          "$($hash.Hash)  $($_.Name)"
        } | Out-File -FilePath $manifestPath -Encoding ASCII
        Write-Host "🧾 Wrote checksum manifest: $manifest"
        Get-Content $manifestPath | Select-Object -First 5 | ForEach-Object { Write-Host "  $_" }
        Write-Host "📋 Final release assets:"
        Get-ChildItem $releaseDir | Sort-Object Name | ForEach-Object { 
          Write-Host "  • $($_.Name) ($([math]::Round($_.Length / 1MB, 2)) MB)"
        }
    
    - name: 📝 Generate categorized changelog & release body
      shell: bash
      env:
        VERSION: ${{ needs.prepare-release.outputs.version }}
      run: |
        set -euo pipefail
        TAG="$VERSION"
        PREV_TAG=$(git describe --tags --abbrev=0 ${TAG}^ 2>/dev/null || true)
        if [ -n "$PREV_TAG" ]; then RANGE="$PREV_TAG..$TAG"; else RANGE="$TAG"; fi
        echo "Generating changelog range: $RANGE"
        git log --format='%s' $RANGE > commits.txt || true
        awk 'BEGIN{IGNORECASE=1} \
          /^feat[:(]/ {feat=feat"\n- "substr($0,6)} \
          /^fix[:(]/ {fix=fix"\n- "substr($0,5)} \
          /^refactor[:(]/ {ref=ref"\n- "substr($0,10)} \
          /^perf[:(]/ {perf=perf"\n- "substr($0,6)} \
          /^docs[:(]/ {docs=docs"\n- "substr($0,6)} \
          /^build[:(]/ {builds=builds"\n- "substr($0,7)} \
          END{ if(feat)print "\n### ✨ Features"feat; if(fix)print "\n### 🐛 Fixes"fix; if(ref)print "\n### ♻️ Refactors"ref; if(perf)print "\n### 🚀 Performance"perf; if(docs)print "\n### 📝 Docs"docs; if(builds)print "\n### 🏗️ Build System"builds; }' commits.txt > categorized.md
        if [ ! -s categorized.md ]; then echo -e "\n### Changes\n- Internal adjustments" > categorized.md; fi
        {
          printf '%s\n' "## 🎉 AGI.Captor $TAG" "" "### 📦 Installation Packages" "" "**Windows:**" "- AGI.Captor-*-win-x64.msi" "- AGI.Captor-*-win-arm64.msi" "" "**macOS:**" "- AGI.Captor-*-osx-x64.pkg" "- AGI.Captor-*-osx-arm64.pkg" "" "**Linux:**" "- AGI.Captor-*-linux-x64.deb" "- AGI.Captor-*-linux-arm64.deb" "" "### 🔄 Auto-Update" "This release includes automatic update functionality. The application will:" "- Check for updates in the background (every 24 hours by default)" "- Download and install updates automatically (configurable)" "- Support cross-platform update distribution" "" "### 🔐 Integrity & Verification" "SHA-256 manifest: SHASUMS-$TAG.txt" "" "Linux/macOS verify all:" '```bash' "shasum -a 256 -c SHASUMS-$TAG.txt" '```' "" "Single file example:" '```bash' "grep AGI.Captor-*linux-x64.deb SHASUMS-$TAG.txt | shasum -a 256 -c -" '```' "" "PowerShell single file:" '```powershell' "$f = Get-Item .\\AGI.Captor-*win-x64.msi" "$expected = (Select-String -Path .\\SHASUMS-$TAG.txt -Pattern $f.Name).Line.Split(' ',[System.StringSplitOptions]::RemoveEmptyEntries)[0]" "$actual = (Get-FileHash $f.FullName -Algorithm SHA256).Hash" "if ($expected -ieq $actual) { Write-Host 'Hash OK' } else { Write-Host 'Mismatch!' ; exit 1 }" '```' "" "### 🧾 Changelog" "_Range: ${PREV_TAG:-Initial} → $TAG_" ;
          cat categorized.md;
        } > custom-release-body.md
        head -n 60 custom-release-body.md
    
    - name: 🚀 Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: final-release/*
        tag_name: ${{ needs.prepare-release.outputs.version }}
        name: AGI.Captor ${{ needs.prepare-release.outputs.version }}
        prerelease: ${{ needs.prepare-release.outputs.is-prerelease }}
        generate_release_notes: false
        body_path: custom-release-body.md
        token: ${{ secrets.GH_PAT }}

  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [publish-release]
    if: always()
    
    steps:
    - name: 🗑️ Delete intermediate artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          windows-x64-release
          windows-arm64-release
          macos-x64-release
          macos-arm64-release
          linux-x64-release
          linux-arm64-release
        failOnError: false